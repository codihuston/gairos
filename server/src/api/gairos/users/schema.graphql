# Note: at least one type Query{} must be initialized somewhere in order
# for the typedefs to form a valid graphql schema
type Query {
  hello: String
  me: User
  getMyTags: [UserTag]
  getMyTasks: [Task]
  getMyTaskHistory: [UserTaskHistory]
}

type Mutation {
  updateMyProfile(input: UserInput): User
  createMyTask(input: TaskInput): Task
  renameMyTask(input: RenameUserTaskInput): Task
  updateMyTask(input: UpdateUserTaskInput): UserTaskInfo
  deleteMyTask(input: DeleteUserTaskInput): Boolean
  createMyTag(input: TagInput): Tag
  tagMyTask(input: TagTaskInput): UserTaskTag
}

type User {
  id: ID!
  googleId: ID!
  username: String!
  email: String,
  isFirstSetupCompleted: Boolean,
  calendarId: ID
  tasks: [Task]
  tags: [Tag]
}

input UserInput{
  username: String
  email: String,
  isFirstSetupCompleted: Boolean,
  calendarId: ID
}

type UserTaskInfo{
  id: ID!
  name: String!
  description: String
  isPublic: Boolean
  createdAt: String
  updatedAt: String
  task: Task
}

type UserTaskHistory{
  userId: ID!
  taskId: ID!
  startTime: String
  endTime: String
  createdAt: String
  updatedAt: String
  task: Task
}

type UserTagInfo{
  id: ID!
  name: String!
  description: String
  isPublic: Boolean
  createdAt: String
  updatedAt: String
}

type UserTag{
  id: ID!
  userId: ID!
  tagId: ID!
  description: String
  isPublic: Boolean
  tag: Tag
  userTaskTags: [UserTaskTag]
  createdAt: String
  updatedAt: String
}

type UserTaskTag{
  id: ID!
  userTagId: ID!
  createdAt: String
  updatedAt: String
  userTaskInfo: UserTaskInfo
}